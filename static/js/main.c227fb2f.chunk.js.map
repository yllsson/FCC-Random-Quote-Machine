{"version":3,"sources":["components/InnerQuoteBox.js","components/Buttons.js","components/app.js","index.js"],"names":["InnerQuoteBox","quote","author","className","id","Buttons","updateQuoteBox","onClick","href","target","rel","App","useState","allQuotes","setAllQuotes","setQuote","setAuthor","color","theme","isPending","setIsPending","error","setError","Math","floor","random","randomIdx","setRandomIdx","themeIdx","setThemeIdx","prevThemeIdx","value","ref","useRef","useEffect","current","usePrevious","newRandomIdx","arr","length","changeThemeColor","elements","document","querySelectorAll","index","forEach","element","style","backgroundColor","body","fetch","then","res","ok","Error","json","data","text","catch","message","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c227fb2f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction InnerQuoteBox({ quote, author }) {\r\n  return (\r\n    <article className='innerQBox'>\r\n      <h2 className='quote' id='text'>\r\n        {`\"${quote}\"`}\r\n      </h2>\r\n      <p className='author' id='author'>\r\n        {author ? author : 'Unknown'}\r\n      </p>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default InnerQuoteBox;\r\n","import React from 'react';\r\n\r\nfunction Buttons({ quote, updateQuoteBox }) {\r\n  return (\r\n    <div className='buttons'>\r\n      <button className='themeElement' id='new-quote' onClick={updateQuoteBox}>\r\n        New quote\r\n      </button>\r\n      <a\r\n        className='themeElement'\r\n        href={`https://twitter.com/intent/tweet?text=So%20inspiring%21${` \"${quote}\"`}&hashtags=randomQuoteMachine%2C100DaysOfCode`}\r\n        id='tweet-quote'\r\n        target='_blank'\r\n        rel='noreferrer'\r\n      >\r\n        <i className='fab fa-twitter'></i>\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buttons;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport InnerQuoteBox from './InnerQuoteBox';\r\nimport Buttons from './Buttons';\r\n\r\n// get previous state\r\nconst usePrevious = (value) => {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n};\r\n\r\nfunction App() {\r\n  // state\r\n  const [allQuotes, setAllQuotes] = useState(null);\r\n  const [quote, setQuote] = useState(null);\r\n  const [author, setAuthor] = useState(null);\r\n  const [theme] = useState({\r\n    color: [\r\n      '#EF6F6C',\r\n      '#465775',\r\n      '#56E39F',\r\n      '#59C9A5',\r\n      '#5B6C5D',\r\n      '#E3170A',\r\n      '#F7B32B',\r\n      '#2D1E2F',\r\n      '#62929E',\r\n      '#C6C5B9',\r\n      '#CE7B91',\r\n      '#031926',\r\n      '#90BE6D',\r\n      '#EA9010',\r\n      '#63264A',\r\n      '#7161EF',\r\n      '#B79CED',\r\n      '#49111C',\r\n      '#BA5A31',\r\n      '#04A777',\r\n      '#30011E',\r\n      '#B68F40',\r\n      '#086375',\r\n      '#3C1642',\r\n      '#454ADE'\r\n    ]\r\n  });\r\n  const [isPending, setIsPending] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [randomIdx, setRandomIdx] = useState(Math.floor(Math.random() * 1000));\r\n  const [themeIdx, setThemeIdx] = useState(Math.floor(Math.random() * 25));\r\n  const prevThemeIdx = usePrevious(themeIdx);\r\n\r\n  // get new random index\r\n  const newRandomIdx = (arr) => {\r\n    if (arr === theme.color) {\r\n      setThemeIdx(Math.floor(Math.random() * arr.length));\r\n    } else {\r\n      setRandomIdx(Math.floor(Math.random() * arr.length));\r\n    }\r\n  };\r\n\r\n  // fetch the quotes\r\n  function fetchQuote() {\r\n    fetch('https://type.fit/api/quotes')\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw Error('Unable to fetch the data');\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setAllQuotes(data);\r\n        newRandomIdx(data);\r\n        setQuote(data[randomIdx].text);\r\n        setAuthor(data[randomIdx].author);\r\n        setIsPending(false);\r\n        setError(null);\r\n      })\r\n      .catch((error) => {\r\n        setIsPending(false);\r\n        setError(error.message);\r\n      });\r\n  }\r\n\r\n  // change the theme colour\r\n  const changeThemeColor = () => {\r\n    const elements = document.querySelectorAll('.themeElement');\r\n    newRandomIdx(theme.color);\r\n\r\n    if (prevThemeIdx === themeIdx) {\r\n      let index = themeIdx - 1;\r\n      if (index < 0) {\r\n        index = theme.color.length - 1;\r\n      }\r\n\r\n      elements.forEach((element) => {\r\n        element.style.backgroundColor = theme.color[index];\r\n      });\r\n      document.body.style.backgroundColor = theme.color[index];\r\n    } else {\r\n      elements.forEach((element) => {\r\n        element.style.backgroundColor = theme.color[themeIdx];\r\n      });\r\n      document.body.style.backgroundColor = theme.color[themeIdx];\r\n    }\r\n  };\r\n\r\n  // functions to use on first render\r\n  useEffect(() => {\r\n    fetchQuote();\r\n    changeThemeColor();\r\n  }, []);\r\n\r\n  // subsequent updates of the quote box\r\n  const updateQuoteBox = () => {\r\n    newRandomIdx(allQuotes);\r\n    setQuote(allQuotes[randomIdx].text);\r\n    setAuthor(allQuotes[randomIdx].author);\r\n    changeThemeColor();\r\n  };\r\n\r\n  return (\r\n    <main id='quote-box'>\r\n      {error && <h2 className='error'>{`Error: ${error}`}</h2>}\r\n      {isPending && <h2>Grabbing Quote...</h2>}\r\n      {allQuotes && <InnerQuoteBox quote={quote} author={author} />}\r\n      <Buttons quote={quote} updateQuoteBox={updateQuoteBox} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport './css/style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}