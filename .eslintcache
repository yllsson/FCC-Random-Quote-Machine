[{"C:\\Users\\yllss\\Desktop\\Websites_2021\\FCC-Random-Quote-Machine\\src\\index.js":"1","C:\\Users\\yllss\\Desktop\\Websites_2021\\FCC-Random-Quote-Machine\\src\\components\\app.js":"2","C:\\Users\\yllss\\Desktop\\Websites_2021\\FCC-Random-Quote-Machine\\src\\components\\Buttons.js":"3","C:\\Users\\yllss\\Desktop\\Websites_2021\\FCC-Random-Quote-Machine\\src\\components\\InnerQuoteBox.js":"4","C:\\Users\\yllss\\Desktop\\Websites_2021\\FCC-Random-Quote-Machine\\src\\components\\App.js":"5"},{"size":234,"mtime":1611180252622,"results":"6","hashOfConfig":"7"},{"size":3498,"mtime":1611177660642,"results":"8","hashOfConfig":"7"},{"size":605,"mtime":1611177577056,"results":"9","hashOfConfig":"7"},{"size":352,"mtime":1611177648249,"results":"10","hashOfConfig":"7"},{"size":3498,"mtime":1611177660642,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hw9ar1",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\yllss\\Desktop\\Websites_2021\\FCC-Random-Quote-Machine\\src\\index.js",[],"C:\\Users\\yllss\\Desktop\\Websites_2021\\FCC-Random-Quote-Machine\\src\\components\\app.js",["24"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport InnerQuoteBox from './InnerQuoteBox';\r\nimport Buttons from './Buttons';\r\n\r\n// get previous state\r\nconst usePrevious = (value) => {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n};\r\n\r\nfunction App() {\r\n  // state\r\n  const [allQuotes, setAllQuotes] = useState(null);\r\n  const [quote, setQuote] = useState(null);\r\n  const [author, setAuthor] = useState(null);\r\n  const [theme] = useState({\r\n    color: [\r\n      '#EF6F6C',\r\n      '#465775',\r\n      '#56E39F',\r\n      '#59C9A5',\r\n      '#5B6C5D',\r\n      '#E3170A',\r\n      '#F7B32B',\r\n      '#2D1E2F',\r\n      '#62929E',\r\n      '#C6C5B9',\r\n      '#CE7B91',\r\n      '#031926',\r\n      '#90BE6D',\r\n      '#EA9010',\r\n      '#63264A',\r\n      '#7161EF',\r\n      '#B79CED',\r\n      '#49111C',\r\n      '#BA5A31',\r\n      '#04A777',\r\n      '#30011E',\r\n      '#B68F40',\r\n      '#086375',\r\n      '#3C1642',\r\n      '#454ADE'\r\n    ]\r\n  });\r\n  const [isPending, setIsPending] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [randomIdx, setRandomIdx] = useState(Math.floor(Math.random() * 1000));\r\n  const [themeIdx, setThemeIdx] = useState(Math.floor(Math.random() * 25));\r\n  const prevThemeIdx = usePrevious(themeIdx);\r\n\r\n  // get new random index\r\n  const newRandomIdx = (arr) => {\r\n    if (arr === theme.color) {\r\n      setThemeIdx(Math.floor(Math.random() * arr.length));\r\n    } else {\r\n      setRandomIdx(Math.floor(Math.random() * arr.length));\r\n    }\r\n  };\r\n\r\n  // fetch the quotes\r\n  function fetchQuote() {\r\n    fetch('https://type.fit/api/quotes')\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw Error('Unable to fetch the data');\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setAllQuotes(data);\r\n        newRandomIdx(data);\r\n        setQuote(data[randomIdx].text);\r\n        setAuthor(data[randomIdx].author);\r\n        setIsPending(false);\r\n        setError(null);\r\n      })\r\n      .catch((error) => {\r\n        setIsPending(false);\r\n        setError(error.message);\r\n      });\r\n  }\r\n\r\n  // change the theme colour\r\n  const changeThemeColor = () => {\r\n    const elements = document.querySelectorAll('.themeElement');\r\n    newRandomIdx(theme.color);\r\n\r\n    if (prevThemeIdx === themeIdx) {\r\n      let index = themeIdx - 1;\r\n      if (index < 0) {\r\n        index = theme.color.length - 1;\r\n      }\r\n\r\n      elements.forEach((element) => {\r\n        element.style.backgroundColor = theme.color[index];\r\n      });\r\n      document.body.style.backgroundColor = theme.color[index];\r\n    } else {\r\n      elements.forEach((element) => {\r\n        element.style.backgroundColor = theme.color[themeIdx];\r\n      });\r\n      document.body.style.backgroundColor = theme.color[themeIdx];\r\n    }\r\n  };\r\n\r\n  // functions to use on first render\r\n  useEffect(() => {\r\n    fetchQuote();\r\n    changeThemeColor();\r\n  }, []);\r\n\r\n  // subsequent updates of the quote box\r\n  const updateQuoteBox = () => {\r\n    newRandomIdx(allQuotes);\r\n    setQuote(allQuotes[randomIdx].text);\r\n    setAuthor(allQuotes[randomIdx].author);\r\n    changeThemeColor();\r\n  };\r\n\r\n  return (\r\n    <main id='quote-box'>\r\n      {error && <h2 className='error'>{`Error: ${error}`}</h2>}\r\n      {isPending && <h2>Grabbing Quote...</h2>}\r\n      {allQuotes && <InnerQuoteBox quote={quote} author={author} />}\r\n      <Buttons quote={quote} updateQuoteBox={updateQuoteBox} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["25","26"],"C:\\Users\\yllss\\Desktop\\Websites_2021\\FCC-Random-Quote-Machine\\src\\components\\Buttons.js",[],"C:\\Users\\yllss\\Desktop\\Websites_2021\\FCC-Random-Quote-Machine\\src\\components\\InnerQuoteBox.js",[],"C:\\Users\\yllss\\Desktop\\Websites_2021\\FCC-Random-Quote-Machine\\src\\components\\App.js",["27"],{"ruleId":"28","severity":1,"message":"29","line":113,"column":6,"nodeType":"30","endLine":113,"endColumn":8,"suggestions":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"28","severity":1,"message":"29","line":113,"column":6,"nodeType":"30","endLine":113,"endColumn":8,"suggestions":"36"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'changeThemeColor' and 'fetchQuote'. Either include them or remove the dependency array.","ArrayExpression",["37"],"no-native-reassign",["38"],"no-negated-in-lhs",["39"],["40"],{"desc":"41","fix":"42"},"no-global-assign","no-unsafe-negation",{"desc":"41","fix":"43"},"Update the dependencies array to be: [changeThemeColor, fetchQuote]",{"range":"44","text":"45"},{"range":"46","text":"45"},[2931,2933],"[changeThemeColor, fetchQuote]",[2931,2933]]